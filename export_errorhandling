% This export function is used to output a formatted ASCII file (cols = x,y,density,smoothing length,mass,particle type) to input 
% directly into splash for visualization. Currently under development
%to work for all frames



function filename=export_tracer_data_new_f(deltatheta_initial,tracer_x, tracer_y, D_i, M_tracer, p_notpns)

%Now to implement a selector mechanism for the smoothing length or radius
        %deltatheta(tracer_x,tracer_y);
      
        radius = zeros(4999,4000);
        p_number = 4000;
        c_number = 40;
        r_number = p_number/c_number;

        column = [1:40];                        % Here , columns and rows were initialized by zeros(4000). However, 
        row = [1:100];                          % during output, the column number and row number of each particle
        radius_out = zeros(4000);               % is being output as though they are the same. Attempt to fix.
        radius_in = zeros(4000);
        density = zeros(4000);
        
 for i = 1%:4999  
     
    for p = 1:p_number
    
           
            
            row(p) = cast((p_number / c_number), 'uint8') + 1;
            column(p) = mod(p_number,r_number);
            
            disp(row(p))
            disp(column(p))
    
                    if (deltatheta_initial(:,p) < abs(10^-2))

                            radius(:,p) =   D_i(p,4); %where D is a matrix generated by knnsearch  
    
                    else
                                if column(p) == (2:(c_number - 1))
    
                                   radius_out(:,p) = sqrt((tracer_x(:,p)-(tracer_x(:,p+1))^2+(tracer_y(:,p) - tracer_y(:,p+1))^2)); %distance from p to p + 1
                                   radius_in(:,p) = sqrt((tracer_x(:,p)-(tracer_x(:,p-1))^2+(tracer_y(:,p) - tracer_y(:,p-1))^2));  %distance from p to p -1
                                      
                                        if row(p) == 100
                                            radius(:,p) = radius_in(:,p);
                                        else    
                                            radius(:,p) = min(radius_out(:,p), radius_in(:,p));
                                         
                                        end
                                elseif (column == 1 || column == c_number)
                                    
                                    disp '** HEY WE MADE IT **' 
                                    radius(:,p) = 2 * tracer_y(:,p); %Distance to ghost is 2*height                                                     from x axis
                                end
                    end
            
       
                %find density on the fly by calling density function
                disp 'computing density'
                density =compute_density_from_smoothing_length(radius, M_tracer, tracer_y);
                disp 'done'
                
                fprintf('\tLoop: %4d at %4d-%02d-%02d %02d:%02d:%06.3f\n', p, datevec(now))
    end 
     %Begin creating output_framenumber filename format
                strName='';
                for j =1:4-(floor(log10(i))+1)
                        strName=strcat(strName, '0');
                end
                filename=strcat('output_', strName, int2str(i));
        
    
    %meat of the file
    filecontentsa=[tracer_x(i,p_notpns{i});...
                   tracer_y(i,p_notpns{i});...
                   density(i,p_notpns{i});...
                   radius(i,p_notpns{i});...
                   repmat(M_tracer,[1,length(p_notpns{i})]);...
                   zeros([1,length(p_notpns{i})])]';
    
      %Creating the mirror axi-symmetric particles          
    filecontentsb=[tracer_x(i,p_notpns{i});...
                 tracer_y(i,p_notpns{i}).*-1;...
                  density(i,p_notpns{i});...
                  radius(i,p_notpns{i});...
                  repmat(M_tracer,[1,length(p_notpns{i})]);...
                  zeros([1,length(p_notpns{i})])]';
    
              %Combine both real and mirrors
            filecontents=[filecontentsa;filecontentsb];
    
              %Write to ASCII file
                 dlmwrite(filename,filecontents,'\t');
 end
 end
    
